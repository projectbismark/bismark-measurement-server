diff -aur src/common/thread.cpp src/common/thread.cpp
--- src/common/thread.cpp
+++ src/common/thread.cpp
@@ -43,10 +43,10 @@
 	int ret = 0;
 #ifdef WIN32
 	
-	void *pid;
+	LPDWORD pid = 0;
 	
 	idThread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE) nameFunction, argument,
-				(DWORD) NULL, (unsigned long *)&pid);
+				(DWORD) NULL, pid);
 	PRINTD(3,"createThread: Return value CreateThread (WIN32) %lu\n",(unsigned long int)idThread);
 	if (idThread == NULL) ret = -1;
 	PRINTD(3,"createThread: Return value CreateThread: %d\n",ret);
@@ -57,6 +57,7 @@
 
 	ret = pthread_create(&idThread, NULL, nameFunction, argument);
 	if (ret != 0) ret = -1;
+	pthread_detach(idThread);
     PRINTD(3,"createThread: Return value pthread_create (LINUX) %lu\n",(unsigned long int)idThread);
     PRINTD(3,"createThread: Return value createThread : %d\n",ret);
 #endif
diff -aur src/common/thread.h src/common/thread.h
--- src/common/thread.h
+++ src/common/thread.h
@@ -29,67 +29,69 @@
 
 
 #ifdef WIN32
-#include <winsock2.h>
-#include <ws2tcpip.h>
-#include <iostream.h>
-
-typedef HANDLE pthread_t;
-extern char nameProgram[];
+#	include <winsock2.h>
+#	include <ws2tcpip.h>
+#	include <iostream.h>
+	
+	typedef HANDLE pthread_t;
+	extern char nameProgram[];
 
 #endif
 
 #ifdef LINUX_OS
-#include <pthread.h>
-#include <iostream>
-#include <unistd.h>
+#	include <pthread.h>
+#	include <iostream>
+#	include <unistd.h>
 #endif
 
 
 
 #ifdef WIN32
+	
+#	define MUTEX_THREAD_LOCK(a) \
+		mutexThreadLock(a)
 
-#define MUTEX_THREAD_LOCK(a) \
-	mutexThreadLock(a)
-
-
-#define MUTEX_THREAD_UNLOCK(a) \
-	mutexThreadUnlock(a)
-
-
-#define MUTEX_THREAD_RELEASE(a) \
-	mutexThreadRelease(a)
-
+	
+#	define MUTEX_THREAD_UNLOCK(a) \
+		mutexThreadUnlock(a)
 
-#define CREATE_THREAD(a,b,c,d) \
-	createThread(a,b,c,d)
 	
+#	define MUTEX_THREAD_RELEASE(a) \
+		mutexThreadRelease(a)
 
-#define MUTEX_THREAD_INIT(a) \
-	mutexThreadInit(a)
+	
+#	define CREATE_THREAD(a,b,c,d) \
+		createThread(a,b,c,d)
+		
+	
+#	define MUTEX_THREAD_INIT(a) \
+		mutexThreadInit(a)
 
+	
+#	define pthread_cleanup_push(a,b) 
+#	define pthread_cleanup_pop(a)
 #endif
 
 #ifdef LINUX_OS
+	
+#	define MUTEX_THREAD_LOCK(a) \
+		mutexThreadLock(&a)
 
-#define MUTEX_THREAD_LOCK(a) \
-	mutexThreadLock(&a)
-
-
-#define MUTEX_THREAD_UNLOCK(a) \
-	mutexThreadUnlock(&a)
-
-
-#define MUTEX_THREAD_RELEASE(a) \
-	mutexThreadRelease(&a)
-
-
-#define CREATE_THREAD(a,b,c,d) \
-	createThread(a,b,c,d)
 	
+#	define MUTEX_THREAD_UNLOCK(a) \
+		mutexThreadUnlock(&a)
 
-#define MUTEX_THREAD_INIT(a) \
-	mutexThreadInit(&a)
+	
+#	define MUTEX_THREAD_RELEASE(a) \
+		mutexThreadRelease(&a)
 
+	
+#	define CREATE_THREAD(a,b,c,d) \
+		createThread(a,b,c,d)
+		
+	
+#	define MUTEX_THREAD_INIT(a) \
+		mutexThreadInit(&a)
 #endif
 
 
diff -aur src/ITGRecv/data.cpp src/ITGRecv/data.cpp
--- src/ITGRecv/data.cpp
+++ src/ITGRecv/data.cpp
@@ -74,7 +74,7 @@
 	
 	unsigned char payload[MAX_PAYLOAD_SIZE];
 	
-	struct info *infos = (struct info *) malloc(DIM * sizeof(info));
+	struct info *infos = (struct info *) calloc(DIM, sizeof(info));
 	
 	struct addrinfo SrcAddress;
 
@@ -108,11 +108,11 @@
 	
 	paraThread->count = 0;
 
-	if (strcmp(paraThread->serial,"noSerial")!=0) {
+	if (strcmp(paraThread->serial, "noSerial") != 0) {
 		hComm = serialUp(paraThread->serial);
-        if (hComm == INVALID_HANDLE_VALUE)
-             printf("Error opening interface %s \n", paraThread->serial);
-    }
+		if (hComm == INVALID_HANDLE_VALUE)
+			printf("Error opening interface %s \n", paraThread->serial);
+	}
 
 	
 	sock = socket(paraThread->destHost.ai_family, SOCK_RAW,
@@ -187,6 +187,8 @@
 		dimheader = sizeof(icmpv6);
 	}
 
+	pthread_cleanup_push(free, SrcAddress.ai_addr);
+
 	int firstpacket = 1;
 	char HelpSrcAddress[INET6_ADDRSTRLEN];
 	char HelpDstAddress[INET6_ADDRSTRLEN];
@@ -219,7 +221,7 @@
 		
 		memcpy(&payload, ptr, size_r);
 
-	        if (hComm != INVALID_HANDLE_VALUE){
+	        if (hComm > 0){
         	      DTR_Disable(hComm);
               	      DTR_Enable(hComm);
         	}
@@ -291,6 +293,8 @@
 			}	
 		}	
 	}	
+
+	pthread_cleanup_pop(1);
 	return NULL;
 }	
 
@@ -316,7 +320,7 @@
 	
 	unsigned char payload[MAX_PAYLOAD_SIZE];
 	
-	struct info *infos = (struct info *) malloc(DIM * sizeof(info));
+	struct info *infos = (struct info *) calloc(DIM, sizeof(info));
 	
 	struct addrinfo SrcAddress;
 	
@@ -348,8 +352,8 @@
 
 	if (strcmp(paraThread->serial,"noSerial")!=0) {
 		hComm = serialUp(paraThread->serial);
-        if (hComm == INVALID_HANDLE_VALUE)
-             printf("Error opening interface %s \n", paraThread->serial);
+		if (hComm == INVALID_HANDLE_VALUE)
+		     printf("Error opening interface %s \n", paraThread->serial);
  	}
 
 	bool socketAlreadyOpen = false;
@@ -534,7 +538,7 @@
 		SrcAddress.ai_addrlen = sizeof(struct sockaddr_in6);
 	}
 
-
+	pthread_cleanup_push(free, SrcAddress.ai_addr);
 
 	int firstpacket = 1;
 	char HelpSrcAddress[INET6_ADDRSTRLEN];
@@ -563,7 +567,7 @@
 			reportErrorAndExit("udpSock","recvfrom","Cannot receive UDP packets");
 		}
 
-		if (hComm != INVALID_HANDLE_VALUE){
+		if (hComm > 0){
 			DTR_Disable(hComm);
 			DTR_Enable(hComm);
 		}
@@ -664,6 +668,7 @@
 			PRINTD(2,"udpSock: Sent RTTM message\n");
 		}	
 	}	
+	pthread_cleanup_pop(1);
 	return NULL;
 }	
 
@@ -691,7 +696,7 @@
 	
 	unsigned char payload[MAX_PAYLOAD_SIZE];
 	
-	struct info *infos = (struct info *) malloc(DIM * sizeof(info));
+	struct info *infos = (struct info *) calloc(DIM, sizeof(info));
 	
 	struct addrinfo SrcAddress;
 	
@@ -847,6 +852,8 @@
 		SrcAddress.ai_addrlen = sizeof(struct sockaddr_in6);
 	}
 
+	pthread_cleanup_push(free, SrcAddress.ai_addr);
+
 	if (passiveMode == false){ 	
 
 		
@@ -937,43 +944,43 @@
 	PRINTD(1,"tcpSock: main loop\n");
 	
 	while (1) {
-	  
+		
 		PRINTD(2, "tcpSock: preambleSize = %d \n",paraThread->preambleSize);
-       size=TCPrecvPacket((unsigned char*)payload,newSock,paraThread->preambleSize,paraThread->payloadLogType);
+		size=TCPrecvPacket((unsigned char*)payload,newSock,paraThread->preambleSize,paraThread->payloadLogType);
 
-       
-       if (size <= 0){
-    	   PRINTD(1,"tcpSock: TCPrecvPacket() = %d\n",size);
-    	   
-    	   if (size < 0){
-    		   
-    		   struct pipeMsg msg;
-
-        	   if(passiveMode==false){
-        		   GET_PORT((&(paraThread->destHost)), tmpPort_DstPort);
-        	   }else{
-        		   GET_PORT((&SrcAddress), tmpPort_DstPort);
-        	   }
-        	   printf("Error on TCP port : %d\n", ntohs(tmpPort_DstPort));
-        	   printf("Finish on TCP port : %d\n\n", ntohs(tmpPort_DstPort));
-        	   fflush(stdout);
-
-    		   msg.code = MSG_FT_ERR_SOCK;
-    		   msg.flowId = paraThread->flowId;
-    		   if (sendPipeMsg(paraThread->rPipe, &msg) < 0) {
-    			   printf(" sending msg error");
-    		   }
-    	   }
-    	   sleep(INFINITE);
-       }
-
-       if (hComm != INVALID_HANDLE_VALUE){
-              DTR_Disable(hComm);
-              DTR_Enable(hComm);
-       }
+	       
+	       if (size <= 0){
+		   PRINTD(1,"tcpSock: TCPrecvPacket() = %d\n",size);
+		   
+		   if (size < 0){
+			   
+			   struct pipeMsg msg;
+
+			   if(passiveMode==false){
+				   GET_PORT((&(paraThread->destHost)), tmpPort_DstPort);
+			   }else{
+				   GET_PORT((&SrcAddress), tmpPort_DstPort);
+			   }
+			   printf("Error on TCP port : %d\n", ntohs(tmpPort_DstPort));
+			   printf("Finish on TCP port : %d\n\n", ntohs(tmpPort_DstPort));
+			   fflush(stdout);
+
+			   msg.code = MSG_FT_ERR_SOCK;
+			   msg.flowId = paraThread->flowId;
+			   if (sendPipeMsg(paraThread->rPipe, &msg) < 0) {
+				   printf(" sending msg error");
+			   }
+		   }
+		   sleep(INFINITE);
+	       }
+
+	       if (hComm > 0){
+		      DTR_Disable(hComm);
+		      DTR_Enable(hComm);
+	       }
 
-       
-       GET_TIME_OF_DAY(&RcvTime, _tend, _tstart, secs, msecs, 0, RECEIVER);
+	       
+	       GET_TIME_OF_DAY(&RcvTime, _tend, _tstart, secs, msecs, 0, RECEIVER);
 
 		
 		
@@ -1062,6 +1069,7 @@
 			PRINTD(2,"tcpSock: Sent RTTM infos\n");
 			}	
 	}	
+	pthread_cleanup_pop(1);
 	return NULL;
 }	
 
@@ -1075,7 +1083,7 @@
 	int first = 1;
 #endif
     
-    HANDLE hComm;
+    HANDLE hComm = 0;
 
 	
 	paramThread *paraThread;
@@ -1089,7 +1097,7 @@
 	
 	unsigned char payload[MAX_PAYLOAD_SIZE];
 	
-	struct info *infos = (struct info *) malloc(DIM * sizeof(info));
+	struct info *infos = (struct info *) calloc(DIM, sizeof(info));
 	
 	struct addrinfo SrcAddress;
 	
@@ -1232,6 +1240,8 @@
 			SrcAddress.ai_addrlen = sizeof(struct sockaddr_in6);
 		}
 
+		pthread_cleanup_push(free, SrcAddress.ai_addr); 
+
 		
 
 		if ((newSock = accept(sock, SrcAddress.ai_addr, (socklen_t *) & SrcAddress.ai_addrlen)) < 0)
@@ -1265,7 +1275,7 @@
        size = SCTPrecvPacket ((unsigned char*)payload, newSock, sctpId, paraThread->preambleSize, paraThread->payloadLogType);
        PRINTD(2,"sctpSock: Received SCTP data. Size of the received data chinck: %d\n",size);
 
-       if (hComm != INVALID_HANDLE_VALUE){
+       if (hComm > 0){
               DTR_Disable(hComm);
               DTR_Enable(hComm);
        }
@@ -1348,6 +1358,8 @@
 			PRINTD(2,"sctpSock: Sent RTTM infos\n");
 			}	
 	}	
+
+	pthread_cleanup_pop(1);
 	return NULL;
 }	
 #endif
@@ -1356,11 +1368,11 @@
 void *dccpSock(void *param)
 {
 	PRINTD(1,"dccpSock: dccpSock started\n");
-	HANDLE hComm;
+	HANDLE hComm = 0;
 	int sock = 0;
 	int sendCheck = 0;
 	unsigned char payload[MAX_PAYLOAD_SIZE];
-	struct info *infos = (struct info *) malloc(DIM * sizeof(info));
+	struct info *infos = (struct info *) calloc(DIM, sizeof(info));
 	struct addrinfo SrcAddress;
 	in_port_t tmpPort = 0;
 	int newSock = 0;
@@ -1430,7 +1442,10 @@
 	} else if (SrcAddress.ai_family == PF_INET6) {
 			SrcAddress.ai_addr = (struct sockaddr *) malloc(sizeof(struct sockaddr_in6));
 			SrcAddress.ai_addrlen = sizeof(struct sockaddr_in6);
-		}
+	}
+
+	pthread_cleanup_push(free, SrcAddress.ai_addr);
+
 	if ((newSock = accept(sock, SrcAddress.ai_addr, (socklen_t *) & SrcAddress.ai_addrlen)) < 0)
 		reportErrorAndExit("dccpSock","accept","Cannot accept connection");
 	if ( closeSock(sock) == -1)
@@ -1449,7 +1464,7 @@
 			reportErrorAndExit("udpSock","recvfrom","Cannot receive UDP packets");
 		else if (size>0) {
 			PRINTD(2,"dccpSock: Received DCCP packet, size %d\n", size);
-			if (hComm != INVALID_HANDLE_VALUE){
+			if (hComm > 0){
 				DTR_Disable(hComm);
 				DTR_Enable(hComm);
 			}
@@ -1525,6 +1540,7 @@
 			}
 		} 
 	} 
+	pthread_cleanup_pop(1);
 	return NULL;
 } 
 #endif
diff -aur src/ITGRecv/ITGRecv.cpp src/ITGRecv/ITGRecv.cpp
--- src/ITGRecv/ITGRecv.cpp
+++ src/ITGRecv/ITGRecv.cpp
@@ -1640,9 +1640,10 @@
 
 			
 			numFlow++;
+			free(ptrIP);
 		} else
 			reportErrorAndExit("typeParser", "flowPosition", "Too many thread");
-		
+	
 	} else if (type == TSP_CLOSED_FLOW) {
 
 		PRINTD(1,"typeParser: Received TSP_CLOSED_FLOW(4) message\n");
@@ -1800,6 +1801,7 @@
 
 			
 			free(paraThread[k].addressInfos);
+			free(paraThread[k].destHost.ai_addr);
 			paraThread[k].addressInfos = NULL;
 			
 			flowIdNum[k].flowId = -1;
